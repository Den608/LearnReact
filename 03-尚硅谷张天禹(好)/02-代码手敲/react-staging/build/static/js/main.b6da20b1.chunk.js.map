{"version":3,"sources":["components/Header/index.jsx","components/Item/index.jsx","components/List/index.jsx","components/Footer/index.jsx","App.jsx","index.js"],"names":["Header","handleKeyUp","event","keyCode","target","value","trim","todoObj","id","nanoid","name","idDone","props","chuanaddTodo","alert","console","log","this","className","onKeyUp","type","placeholder","Component","Item","handleMouse","isDone","onMouseEnter","onMouseLeave","defaultChecked","style","display","List","chuantodos","map","todo","Footer","App","state","todos","addTodo","newTodos","setState","ReactDOM","render","document","getElementById"],"mappings":"uTAaqBA,E,4MAEjBC,YAAc,SAACC,GAEX,IAAQC,EAAmBD,EAAnBC,QAAQC,EAAWF,EAAXE,OAKhB,GAAgB,KAAZD,EAGJ,GAA4B,KAAxBC,EAAOC,MAAMC,OAAjB,CAUA,IAAMC,EAAU,CAACC,GAAGC,cAASC,KAAKN,EAAOC,MAAMM,QAAO,GAKtD,EAAKC,MAAMC,aAAaN,GAExBH,EAAOC,MAAQ,QAhBXS,MAAM,+C,4CAkBd,WAKG,OAJCC,QAAQC,IAAIC,MACZF,QAAQC,IAAIC,KAAKL,MAAMC,cAI5B,qBAAKK,UAAU,cAAf,SACY,uBAAOC,QAASF,KAAKhB,YAAamB,KAAK,OAAOC,YAAY,2G,GAtCrCC,a,QCLfC,G,kNASjBC,YAAc,a,4CAGd,WAGI,MAAsBP,KAAKL,MAApBF,EAAP,EAAOA,KAAKe,EAAZ,EAAYA,OACZ,OACI,qBAAIC,aAAeT,KAAKO,aAAY,GAAOG,aAAeV,KAAKO,aAAY,GAA3E,UACI,kCAEI,uBAAOJ,KAAK,WAAWQ,eAAgBH,IAMvC,+BAAQf,OAEZ,wBAAQQ,UAAU,iBAAiBW,MAAO,CAACC,QAAQ,QAAnD,iC,GA5BkBR,cCCbS,G,kKACjB,WAII,IAAOC,EAAef,KAAKL,MAApBoB,WACP,OACI,oBAAId,UAAU,YAAd,SAEQc,EAAWC,KAAI,SAAAC,GAOX,OAAO,cAAC,EAAD,eAAwBA,GAAbA,EAAK1B,a,GAhBbc,cCDba,G,kKACjB,WACI,OACO,sBAAKjB,UAAU,cAAf,UACP,gCACE,uBAAOE,KAAK,eAEd,iCACE,uDADF,sBAGA,wBAAQF,UAAU,iBAAlB,+D,GAV4BI,cCUfc,G,kNAIjBC,MAAQ,CACJC,MAAO,CACH,CAAC9B,GAAG,MAAME,KAAK,eAAKC,QAAO,GAC3B,CAACH,GAAG,MAAME,KAAK,eAAKC,QAAO,GAC3B,CAACH,GAAG,MAAME,KAAK,qBAAMC,QAAO,K,EAQpC4B,QAAU,SAAChC,GAKP,IAAQ+B,EAAU,EAAKD,MAAfC,MAEFE,EAAQ,CAAIjC,GAAJ,mBAAgB+B,IAE9B,EAAKG,SAAS,CACVH,MAAME,K,4CAGd,WAGI,IAAQF,EAASrB,KAAKoB,MAAdC,MACR,OACI,qBAAKpB,UAAU,iBAAf,SACA,sBAAKA,UAAU,YAAf,UAEQ,cAAC,EAAD,CAAQL,aAAeI,KAAKsB,UAC5B,cAAC,EAAD,CAAMP,WAAYM,IAElB,cAAC,EAAD,a,GAxCahB,cCEjCoB,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,W","file":"static/js/main.b6da20b1.chunk.js","sourcesContent":["/*\r\n * @Author: liming\r\n * @Date: 2021-08-11 10:07:29\r\n * @LastEditTime: 2021-08-11 19:08:55\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react-staging\\src\\components\\Header\\index.jsx\r\n */\r\nimport React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n// 这个nanoid是一个函数，你每次调用的时候，都会生成一个字符串\r\nimport './index.css'\r\n// console.log(nanoid());\r\n// console.log(nanoid());\r\n// console.log(nanoid());\r\nexport default class Header extends Component {\r\n\r\n    handleKeyUp = (event) => {\r\n        //解构赋值获取keyCode,target \r\n        const { keyCode,target } = event\r\n        //绑定事件的元素和你要操作的元素是同一个，就没有必要打ref了\r\n        // 我们需要在敲下回车的时候才进行输出，而不是我敲一个字就输出一个字\r\n        // if (event.keyCode !== 13) return\r\n        //判断是否是回车\r\n        if (keyCode !== 13) return\r\n\r\n        //添加的todo名字不能为空——添加这个判断\r\n        if (target.value.trim() === '') {\r\n            alert('输入不能为空！')\r\n            return\r\n            //return不要忘了写！！！不合法的就要拦住！！！！\r\n        }\r\n        // React中没有Vue里面的@enter这种自定义指令，需要我 们自己判断\r\n        // console.log(event.target.value,event.keyCode);\r\n        // console.log(target.value,keyCode);\r\n        //准备一个todo对象\r\n        // 新添加的一件事，isDone的初始值一定是false\r\n        const todoObj = {id:nanoid(),name:target.value,idDone:false}\r\n        // this.props.chuanaddTodo(target.value)\r\n        // 你这么写只是把名字给传进去了，但是addTodo函数里的参数要的是一个todo对象，所以你还要把id和isDone给补充一下\r\n\r\n        //将todoObj传递给App\r\n        this.props.chuanaddTodo(todoObj)\r\n        //最后一步要清空输入\r\n        target.value = ''\r\n    }\r\n    render() {\r\n        console.log(this);\r\n        console.log(this.props.chuanaddTodo);\r\n        // this.props.chuana(target.value)\r\n        // 不要晕了，把函数写到这里了！！！！！\r\n       return (\r\n\t\t\t<div className=\"todo-header\">\r\n               <input onKeyUp={this.handleKeyUp} type=\"text\" placeholder=\"请输入你的任务名称，按回车键确认\" />\r\n               {/* 建议使用onKeyUp，代表这个按键真正的按完了 */}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","/*\r\n * @Author: liming\r\n * @Date: 2021-08-11 10:09:19\r\n * @LastEditTime: 2021-08-11 19:27:39\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react-staging\\src\\components\\Item\\index.jsx\r\n */\r\nimport React, { Component } from 'react'\r\nimport './index.css'\r\nexport default class Item extends Component {\r\n\r\n    //勾选、取消勾选某一个todo的回调\r\n\t// handleCheck = (id)=>{\r\n\t// \treturn (event)=>{\r\n\t// \t\tthis.props.updateTodo(id,event.target.checked)\r\n\t// \t}\r\n\t// }\r\n\r\n    handleMouse = () => {\r\n        \r\n    }\r\n    render() {\r\n        // console.log(this);\r\n        // const {id,name,isDone} = this.props;\r\n        const {name,isDone} = this.props;\r\n        return (\r\n            <li onMouseEnter={ this.handleMouse(true)} onMouseLeave={ this.handleMouse(false) } >\r\n                <label>\r\n                    {/* <input type=\"checkbox\" checked/> */}\r\n                    <input type=\"checkbox\" defaultChecked={isDone} />\r\n                    {/* 日了狗了，这个选框写了怎么没有效果啊，找了半天错没找出来 */}\r\n                    {/* 使用defaultChecked，表明刚开始是否勾选，后续还是可以更改的 */}\r\n                    {/* <span>xxxxx</span> */}\r\n                    {/* <span>name</span> */}\r\n                    {/* 变量要写大括号 */}\r\n                    <span>{ name}</span>\r\n                </label>\r\n                <button className=\"btn btn-danger\" style={{display:'none'}}>删除</button>\r\n        </li>\r\n        )\r\n    }\r\n}\r\n","/*\r\n * @Author: liming\r\n * @Date: 2021-08-11 10:09:34\r\n * @LastEditTime: 2021-08-11 19:22:45\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react-staging\\src\\components\\List\\index.jsx\r\n */\r\nimport React, { Component } from 'react'\r\nimport Item from '../Item'\r\nimport './index.css'\r\nexport default class List extends Component {\r\n    render() {\r\n        // 这里的this是List实例，里面的props是有内容的\r\n        // console.log(this);\r\n         /*为了看的更清楚，我特意写的不一样，传的是chuantodos,里面内容是todos*/\r\n        const {chuantodos } = this.props\r\n        return (\r\n            <ul className=\"todo-main\">\r\n                {\r\n                    chuantodos.map(todo => {\r\n                        // chuantodos是一个数组，里面的每一项是todo\r\n                        // return <Item key={todo.id} id={todo.id} name={todo.name} isDone={todo.isDone} />\r\n                        // 这样写不好，如果一个todo有100个信息，你不能一个一个写吧\r\n\r\n                        // 写法2：一堆东西可以使用...来进行批量传递\r\n                        // 嗯，todo本身是一个对象，使用...可以批量的把东西都传进去\r\n                        return <Item key={todo.id} {...todo}/>\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","/*\r\n * @Author: liming\r\n * @Date: 2021-08-11 10:09:03\r\n * @LastEditTime: 2021-08-11 10:44:01\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react-staging\\src\\components\\Footer\\index.jsx\r\n */\r\nimport React, { Component } from 'react'\r\nimport './index.css'\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n               <div className=\"todo-footer\">\r\n        <label>\r\n          <input type=\"checkbox\"/>\r\n        </label>\r\n        <span>\r\n          <span>已完成0</span> / 全部2\r\n        </span>\r\n        <button className=\"btn btn-danger\">清除已完成任务</button>\r\n      </div>\r\n        )\r\n    }\r\n}\r\n","/*\r\n * @Author: liming\r\n * @Date: 2021-08-04 22:35:08\r\n * @LastEditTime: 2021-08-11 19:23:14\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react-staging\\src\\App.jsx\r\n */\r\n\r\n// 记得把class改成className\r\n//style写成双花括号形式\r\nimport React, { Component } from 'react'\r\n// import './components/Header'\r\n// 我写成了这样，傻啦吧唧的找了半天的错。。。。。。\r\nimport Header from './components/Header'\r\nimport List from './components/List'\r\nimport Footer from './components/Footer'\r\nimport './App.css'\r\n//引入包的原则：第三方的包往上靠，自己的包往下靠,样式写到下面\r\n\r\nexport default class App extends Component {\r\n    // state={todos:['吃饭','睡觉']}\r\n    // 你不能用一个字符串来表示吃饭，吃饭得是一个todo对象\r\n    //初始化状态\r\n    state = {\r\n        todos: [\r\n            {id:'001',name:'吃饭',idDone:true},\r\n            {id:'002',name:'睡觉',idDone:false},\r\n            {id:'003',name:'打豆豆',idDone:true},\r\n        ]\r\n    }\r\n    \r\n    // 如果想要子组件给父组件一些东西，就要求父当年通过props给子传递一些函数\r\n    // 这个时候子在合适的时候，想给父传数据的时候，调用一下这个函数即可\r\n    // addTodo = (data) => {\r\n    // addTodo用于添加一个todo,接收的参数是todo对象\r\n    addTodo = (todoObj) => {\r\n        //addTodo是个函数，可以进行调用\r\n        // 我需要你传过来的本身就是一个对象，你不要把名字直接给我甩过来\r\n        // console.log('App',todoObj);\r\n        // 获取原todos\r\n        const { todos } = this.state\r\n        //追加一个todo\r\n        const newTodos = [todoObj, ...todos]\r\n        //更新状态\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    render() {\r\n        // console.log(this);\r\n        // 这里的this是App实例，是空的\r\n        const { todos} = this.state\r\n        return (\r\n            <div className=\"todo-container\">\r\n            <div className=\"todo-wrap\">\r\n                    {/* <Header a={ 1}/> */}\r\n                    <Header chuanaddTodo={ this.addTodo}/>\r\n                    <List chuantodos={todos} />\r\n                    {/* 父亲给儿子传东西就这样传 */}\r\n                    <Footer />\r\n                    { /*状态中的数据驱动着页面的展示*/}\r\n                    { /*目前，todos的一堆状态要放到App里面，否则我们写不下去*/}\r\n                    { /*为了看的更清楚，我特意写的不一样，传的是chuantodos,里面内容是todos*/}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/*\n * @Author: liming\n * @Date: 2021-08-02 23:26:58\n * @LastEditTime: 2021-08-04 22:36:01\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react-staging\\src\\index.js\n */\n\n//脚手架已经帮你安好React了\n\n//在入口文件里面的第一件事：引入React核心库\nimport React from 'react';\n\n//引入ReactDOM\nimport ReactDOM from 'react-dom';\n\n//引入App组件\nimport App from './App';\n//.js后缀名可以省略(.css后缀名无法省略)\n\n//渲染APP组件到页面\nReactDOM.render(<App/>,document.getElementById('root'))\n\n\n\n\n\n"],"sourceRoot":""}